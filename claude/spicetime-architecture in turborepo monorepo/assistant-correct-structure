# Assistant Service Structure (GraphQL Backend)

```
monorepo/packages/services/assistant/
├── src/
│   ├── schema/                  # GraphQL schema
│   │   ├── typeDefs.ts         # Type definitions
│   │   └── resolvers.ts        # Resolvers
│   ├── domain/                  # Core business logic
│   │   ├── types/
│   │   │   ├── index.ts        # Type exports
│   │   │   └── assistant.ts    # Core types
│   │   ├── services/
│   │   │   ├── index.ts        # Service exports
│   │   │   └── assistant.ts    # Assistant logic
│   │   └── errors.ts           # Domain errors
│   ├── infrastructure/          # External integrations
│   │   ├── database/           # DB connections/models
│   │   └── ai/                 # AI service integrations
│   ├── utils/
│   │   ├── index.ts            # Utility exports
│   │   ├── prompts.ts         # Prompt handling
│   │   └── context.ts         # Context utilities
│   └── index.ts                # Service entry point
├── tests/
│   ├── schema/
│   │   └── resolvers.test.ts
│   ├── domain/
│   │   └── services/
│   │       └── assistant.test.ts
│   └── infrastructure/
│       └── ai/
│           └── integration.test.ts
├── docs/
│   ├── README.md               # Service documentation
│   ├── schema.md              # GraphQL schema docs
│   └── deployment.md          # Deployment guide
├── package.json
├── tsconfig.json
└── vitest.config.ts

# Telegram Client Structure

monorepo/packages/clients/assistant-telegram/
├── src/
│   ├── commands/               # Telegram bot commands
│   │   ├── index.ts           # Command exports
│   │   ├── start.ts          # Start command
│   │   └── help.ts           # Help command
│   ├── handlers/              # Message handlers
│   │   ├── index.ts          # Handler exports
│   │   ├── message.ts        # Message handling
│   │   └── callback.ts       # Callback handling
│   ├── graphql/              # GraphQL client code
│   │   ├── queries/          # GraphQL queries
│   │   │   └── assistant.ts  # Assistant queries
│   │   └── mutations/        # GraphQL mutations
│   │       └── assistant.ts  # Assistant mutations
│   ├── utils/
│   │   ├── index.ts          # Utility exports
│   │   └── formatting.ts     # Message formatting
│   └── index.ts              # Client entry point
├── tests/
│   ├── commands/
│   │   └── start.test.ts
│   ├── handlers/
│   │   └── message.test.ts
│   └── utils/
│       └── formatting.test.ts
├── docs/
│   ├── README.md             # Client documentation
│   └── bot-commands.md       # Bot command reference
├── package.json
├── tsconfig.json
└── vitest.config.ts
```

## Service package.json
```json
{
  "name": "@spicetime/assistant-service",
  "version": "0.1.0",
  "main": "dist/index.js",
  "types": "dist/index.d.ts",
  "scripts": {
    "build": "tsup src/index.ts --format esm,cjs --dts",
    "dev": "tsup src/index.ts --format esm,cjs --watch --dts",
    "start": "node dist/index.js",
    "test": "vitest run",
    "test:watch": "vitest",
    "lint": "eslint src",
    "typecheck": "tsc --noEmit",
    "generate:schema": "graphql-codegen"
  },
  "dependencies": {
    "@apollo/server": "^4.9.3",
    "graphql": "^16.8.1",
    "zod": "^3.22.4"
  },
  "devDependencies": {
    "@graphql-codegen/cli": "^5.0.0",
    "@graphql-codegen/typescript": "^4.0.1",
    "@graphql-codegen/typescript-resolvers": "^4.0.1",
    "tsup": "^7.2.0",
    "typescript": "^5.2.2",
    "vitest": "^0.34.6",
    "@types/node": "^20.8.0"
  }
}
```

## Client package.json
```json
{
  "name": "@spicetime/assistant-telegram",
  "version": "0.1.0",
  "main": "dist/index.js",
  "types": "dist/index.d.ts",
  "scripts": {
    "build": "tsup src/index.ts --format esm,cjs --dts",
    "dev": "tsup src/index.ts --format esm,cjs --watch --dts",
    "start": "node dist/index.js",
    "test": "vitest run",
    "test:watch": "vitest",
    "lint": "eslint src",
    "typecheck": "tsc --noEmit"
  },
  "dependencies": {
    "@apollo/client": "^3.8.4",
    "@spicetime/graphql-client": "workspace:*",
    "telegraf": "^4.15.0",
    "graphql": "^16.8.1"
  },
  "devDependencies": {
    "tsup": "^7.2.0",
    "typescript": "^5.2.2",
    "vitest": "^0.34.6",
    "@types/node": "^20.8.0"
  }
}
```

Key architectural points:

1. Assistant Service:
   - Full GraphQL backend service
   - Core business logic in domain layer
   - Infrastructure layer for external integrations
   - Schema-first GraphQL development
   - Clear separation of concerns

2. Telegram Client:
   - Consumes assistant service via GraphQL
   - Handles Telegram-specific interactions
   - Command-based structure
   - Message handling and formatting
   - GraphQL queries/mutations organized by feature

3. Integration:
   - Client uses generated types from service's GraphQL schema
   - Clean separation between business logic (service) and delivery mechanism (client)
   - Service-oriented architecture principles
   - Type safety across service boundary

Would you like me to elaborate on any part of the architecture or show example implementations of key files?